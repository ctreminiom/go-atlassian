// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "github.com/ctreminiom/go-atlassian/pkg/infra/models"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

// Call provides a mock function with given fields: request, structure
func (_m *Connector) Call(request *http.Request, structure interface{}) (*models.ResponseScheme, error) {
	ret := _m.Called(request, structure)

	var r0 *models.ResponseScheme
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) (*models.ResponseScheme, error)); ok {
		return rf(request, structure)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, interface{}) *models.ResponseScheme); ok {
		r0 = rf(request, structure)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ResponseScheme)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, interface{}) error); ok {
		r1 = rf(request, structure)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRequest provides a mock function with given fields: ctx, method, urlStr, type_, body
func (_m *Connector) NewRequest(ctx context.Context, method string, urlStr string, type_ string, body interface{}) (*http.Request, error) {
	ret := _m.Called(ctx, method, urlStr, type_, body)

	var r0 *http.Request
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}) (*http.Request, error)); ok {
		return rf(ctx, method, urlStr, type_, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, interface{}) *http.Request); ok {
		r0 = rf(ctx, method, urlStr, type_, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, interface{}) error); ok {
		r1 = rf(ctx, method, urlStr, type_, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConnector creates a new instance of Connector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connector {
	mock := &Connector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
